{
  "Express Mongoose Example": {
    "prefix": "expMongooseApp",
    "body": [
      "// Import libraries",
      "const express = require('express');",
      "const mongoose = require('mongoose');",
      "const path = require('path');",
      "const PORT = process.env.PORT || 3000;",
      "",
      "// Initialize app",
      "const app = express();",
      "app.use(express.json());",
      "app.use(express.urlencoded({ extended: true }));",
      "",
      "// Set EJS engine",
      "app.set('view engine', 'ejs');",
      "app.set('views', path.join(__dirname, 'views'));",
      "",
      "// MongoDB connection",
      "mongoose",
      "  .connect(\"mongodb://localhost:27017/auth-demo\")",
      "  .then(() => console.log(\"DB Connected!\"));",
      "",
      "// Schema and model",
      "const userSchema = new mongoose.Schema({",
      "    name: String,",
      "    email: String,",
      "    password: String",
      "});",
      "const User = mongoose.model('User', userSchema);",
      "",
      "// Routes",
      "app.get('/', (req, res) => res.render('index'));",
      "",
      "app.post('/users', async (req, res) => {",
      "    const { name, email, password } = req.body;",
      "    const newUser = new User({ name, email, password });",
      "    await newUser.save();",
      "    res.json(newUser);",
      "});",
      "",
      "app.get('/users', async (req, res) => {",
      "    const users = await User.find();",
      "    res.json(users);",
      "});",
      "",
      "app.get('/users/:id', async (req, res) => {",
      "    const user = await User.findById(req.params.id);",
      "    res.json(user);",
      "});",
      "",
      "app.put('/users/:id', async (req, res) => {",
      "    const { name, email, password } = req.body;",
      "    const updatedUser = await User.findByIdAndUpdate(req.params.id, { name, email, password }, { new: true });",
      "    res.json(updatedUser);",
      "});",
      "",
      "app.delete('/users/:id', async (req, res) => {",
      "    await User.findByIdAndDelete(req.params.id);",
      "    res.json({ message: 'User deleted' });",
      "});",
      "",
      "// Start server",
      "app.listen(PORT, () => console.log(`server is running on Port ${ PORT }`));"
    ],
    "description": "Express and Mongoose full example"
  }
}
